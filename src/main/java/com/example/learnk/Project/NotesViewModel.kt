package com.example.learnk.Project

import android.util.Log
import androidx.lifecycle.ViewModel
import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers
import io.reactivex.rxjava3.disposables.CompositeDisposable
import io.reactivex.rxjava3.schedulers.Schedulers
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.LiveData
import io.reactivex.rxjava3.core.Single



class NotesViewModel(private val repository: NotesRepository) : ViewModel() {

    private val _notesLiveData = MutableLiveData<List<Note>>()
    val notesLiveData: LiveData<List<Note>> get() = _notesLiveData

    val deleteStatus: MutableLiveData<Boolean> = MutableLiveData()

    private val compositeDisposable = CompositeDisposable()

    init {
        getAllNotes()
    }

    fun getAllNotes() {
        compositeDisposable.add(
            repository.getAllNotes()
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe({ notes ->
                    _notesLiveData.value = notes
                }, { error ->
                    Log.e("NotesViewModel", "Error fetching notes", error)
                })
        )
    }

    fun deleteNote(noteId: Int) {
        compositeDisposable.add(
            repository.deleteNote(noteId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe({
                    deleteStatus.value = true
                    getAllNotes() // Refresh list after deletion
                }, { error ->
                    deleteStatus.value = false
                    Log.e("NotesViewModel", "Error deleting note: ${error.message}")
                })
        )
    }

    fun updateNote(id: Int, title: String, content: String): Single<Unit> {
        return repository.updateNote(id, title, content)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
    }


    fun addNote(title: String, content: String): Single<Unit> {
        val note = Note(
            id = 0, // ID will be generated by the server
            title = title,
            content = content
        )
        return repository.addNote(note)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .doOnSuccess { getAllNotes() } // Refresh notes after adding
    }

    override fun onCleared() {
        super.onCleared()
        compositeDisposable.clear()
    }
}
